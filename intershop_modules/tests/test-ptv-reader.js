// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, PTVR, TAP, alert, badge, debug, echo, eq, help, info, jr, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PTVR/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  TAP = require('tap');

  eq = CND.equals;

  jr = JSON.stringify;

  PTVR = require('../ptv-reader');

  //-----------------------------------------------------------------------------------------------------------
  TAP.test("demo", function(T) {
    info(PTVR.split_line('foo/bar     ::integer[]= [ 1, 2, 3, 4, ]'));
    info(PTVR.split_line('foo/bar     ::integer[]=  '));
    info(PTVR.split_line('foo/bar     ::integer[]='));
    //.........................................................................................................
    return T.end();
  });

  //-----------------------------------------------------------------------------------------------------------
  TAP.test("line splitting", function(T) {
    var i, len, matcher, probe, probes_and_matchers, result;
    probes_and_matchers = [
      [
        'foo/bar     ::integer[]= [ 1, 2, 3, 4, ]',
        {
          path: 'foo/bar',
          "type": "integer[]",
          value: '[ 1, 2, 3, 4, ]'
        }
      ],
      [
        'foo/bar     ::integer[]=  ',
        {
          path: 'foo/bar',
          "type": "integer[]",
          value: ''
        }
      ],
      [
        'foo/bar     ::integer[]=',
        {
          path: 'foo/bar',
          "type": "integer[]",
          value: ''
        }
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher] = probes_and_matchers[i];
      result = PTVR.split_line(probe);
      help(jr([probe, result]));
      T.ok(eq(result, matcher));
    }
    //.........................................................................................................
    return T.end();
  });

  //-----------------------------------------------------------------------------------------------------------
  TAP.test("matching", function(T) {
    var i, j, len, len1, path, pattern, probe, ref, ref1, type, value;
    probe = {
      'intershop/path': {
        type: 'text/path/folder',
        value: '/path/to/foobar'
      },
      'intershop/rack/path': {
        type: 'text/path/folder',
        value: '/path/to/foobar/..'
      },
      'intershop/jzrds': {
        type: 'text',
        value: 'whtever1'
      },
      'foo/bar/jzrds': {
        type: 'text',
        value: 'whtever2'
      },
      'foo/bar/jzrds/something': {
        type: 'text',
        value: 'whtever3'
      },
      'intershop/jzrds/path': {
        type: 'text/path/folder',
        value: '/path/to/foobar/../jzrds'
      },
      'intershop/testdata/path': {
        type: 'text/path/folder',
        value: '/path/to/foobar/test-data'
      }
    };
    ref = ['**', '*/path', '**/path', '**/jzrds', '**/jzrds/**'];
    //.........................................................................................................
    for (i = 0, len = ref.length; i < len; i++) {
      pattern = ref[i];
      urge(pattern);
      ref1 = PTVR.match(probe, pattern);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        [path, {type, value}] = ref1[j];
        info(path.padEnd(45), CND.grey(type.padEnd(15)), CND.white(value));
      }
    }
    //.........................................................................................................
    return T.end();
  });

}).call(this);

//# sourceMappingURL=test-ptv-reader.js.map
