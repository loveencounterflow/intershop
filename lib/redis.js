// Generated by CoffeeScript 2.2.1
(function() {
  'use strict';
  var CND, REDIS, alert, badge, client, debug, echo, help, info, promisify, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERSHOP/REDIS';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  REDIS = require('redis');

  promisify = (require('util')).promisify;

  client = REDIS.createClient();

  client.on('error', function(error) {
    return alert(error);
  });

  client.on('ready', function() {
    return urge('ready');
  });

  client.on('connect', function() {
    return urge('connect');
  });

  client.on('reconnecting', function() {
    return urge('reconnecting');
  });

  client.on('end', function() {
    return urge('end');
  });

  client.on('warning', function(message) {
    return urge(message);
  });

  client.set('string key', 'string val', function(error, reply) {
    if (error != null) {
      throw error;
    }
    return whisper(reply);
  });

  client.hset('hash key', 'hashtest 1', 'some value', function(error, reply) {
    if (error != null) {
      throw error;
    }
    return whisper(reply);
  });

  client.hset(['hash key', 'hashtest 2', 'some other value'], function(error, reply) {
    if (error != null) {
      throw error;
    }
    return whisper(reply);
  });

  client.hkeys('hash key', function(error, replies) {
    var i, len, reply;
    if (error != null) {
      throw error;
    }
    help(`${replies.length} replies:`);
    for (i = 0, len = replies.length; i < len; i++) {
      reply = replies[i];
      info(reply);
    }
    return client.quit();
  });

  CND.dir(REDIS);

  CND.dir(client);

}).call(this);

//# sourceMappingURL=redis.js.map
