// Generated by CoffeeScript 2.2.1
(function() {
  //###########################################################################################################
  var CND, O, alert, badge, debug, echo, help, info, monitor, respawn, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'INTERSHOP/RPC/PRIMARY';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  /* https://github.com/mafintosh/respawn */
  respawn = require('respawn');

  //...........................................................................................................
  O = require('./options');

  monitor = respawn(O.respawn);

  monitor.on('crash', function(data) {
    return urge('crash', '>>>>>>>>>>>', "The monitor has crashed (too many restarts or spawn error).");
  });

  monitor.on('sleep', function(data) {
    return urge('sleep', '>>>>>>>>>>>', "monitor is sleeping");
  });

  monitor.on('spawn', function(data) {
    return urge('spawn', '>>>>>>>>>>>', "New child process has been spawned");
  });

  monitor.on('start', function(data) {
    return urge('start', '>>>>>>>>>>>', "The monitor has started");
  });

  monitor.on('stderr', function(data) {
    urge('stderr', '>>>>>>>>>>>', "child process stderr has emitted data");
    return whisper(data);
  });

  monitor.on('stdout', function(data) {
    urge('stdout', '>>>>>>>>>>>', "child process stdout has emitted data");
    return whisper(data);
  });

  monitor.on('stop', function(data) {
    return urge('stop', '>>>>>>>>>>>', "The monitor has fully stopped and the process is killed");
  });

  monitor.on('warn', function(data) {
    urge('warn', '>>>>>>>>>>>', "child process has emitted an error");
    return warn(data);
  });

  //-----------------------------------------------------------------------------------------------------------
  monitor.on('exit', function(code, signal) {
    urge('exit', '>>>>>>>>>>>', `child process has exited with code ${rpr(code)}, signal ${rpr(signal)}`);
    if (code !== 0) {
      urge("terminating RPC server primary");
      return process.exit(code);
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  monitor.on('message', function(message) {
    urge(`received message: ${rpr(message)}`);
    switch (message) {
      case 'stop':
        warn("terminating");
        process.exit(0);
        break;
      default:
        warn("unknown message; ignoring");
    }
    return null;
  });

  //###########################################################################################################
  monitor.start();

}).call(this);

//# sourceMappingURL=intershop-rpc-server-primary.js.map
